

L.HSyntax.parse.term.variable (table: L.DepthTable) {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask name = L.parse_name
    return (Bool.if (String.equal name "Type")
      L.Term.type
      (Bool.if (String.equal name "_")
        L.Term.hole
        (L.Term.attach (L.Term.var (Maybe.default (L.DepthTable.get table name) 123)) name)
    ))
  }
}
L.HSyntax.parse.term.apply (table: L.DepthTable) {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char '('
    ask t1 = L.HSyntax.parse.term table
    ask t2 = L.HSyntax.parse.term table
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char ')'
    return (L.Term.app t1 t2)
  }
}

L.HSyntax.parse.term.container (table: L.DepthTable) (chars: List U60) (build: String -> L.Term -> L.Term -> L.Term): Parser L.Term {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.first_of (List.map chars (char => Parser.char char))
    ask _ = Parser.skip_whitespace
    ask _ = Parser.try (Parser.char '(')
    ask _ = Parser.skip_whitespace
    ask var_name = L.parse_name
    ask _ = Parser.skip_whitespace
    Parser.first_of [
      do Parser {
        ask _ = Parser.char ':'
        ask type = L.HSyntax.parse.term table
        ask _ = Parser.skip_whitespace
        ask _ = Parser.try (Parser.char ')')
        ask body = L.HSyntax.parse.term (L.DepthTable.set table var_name)
        return (build var_name type body)
      }
      do Parser {
        let type = L.Term.hole
        ask _ = Parser.skip_whitespace
        ask _ = Parser.try (Parser.char ')')
        ask body = L.HSyntax.parse.term (L.DepthTable.set table var_name)
        return (build var_name type body)
      }
    ]
  }
}

L.HSyntax.parse.with_paren <w> (parser: (Parser w)) {
  do Parser {
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char '('
    ask v = parser
    ask _ = Parser.skip_whitespace
    ask _ = Parser.char ')'
    return v
  }
}

L.HSyntax.show.parse.replace_named_var (table: L.DepthTable) (name: String) (body: L.Term) (with: L.Term): L.Term {
  (L.Util.replace body (L.Term.var ((Nat.to_u60 (List.length table)))) with)
}

L.HSyntax.parse.term (table: L.DepthTable) {
  let next_idx = (+ (Nat.to_u60 (List.length table)) 1)
  Parser.first_of [
    (L.HSyntax.parse.term.apply table)
    (L.HSyntax.parse.term.container table ['@', 'λ'] (var_name => type => body => (L.Term.attach (L.Term.flat_lam type body next_idx) var_name)))
    (L.HSyntax.parse.term.container table ['$', 'ξ'] (var_name => type => body => (L.Term.attach (L.Term.flat_self body next_idx) var_name)))
    (L.HSyntax.parse.term.container table ['%', 'μ'] (var_name => type => body => (L.Term.attach (L.Term.flat_recursive type body next_idx) var_name)))
    (L.HSyntax.parse.term.variable table)
    (L.HSyntax.parse.with_paren (L.HSyntax.parse.term table))
  ]
}

L.HSyntax.parse_either (term: String): Either L.Term Parser.Error {
  Parser.run (L.HSyntax.parse.term (L.DepthTable.new)) term
}

L.HSyntax.parse (term: String): L.Term {
  let v = L.HSyntax.parse_either term
  match Either v {
    left => v.val
    right => let v = v.val; match Parser.Error v {
      new => L.Term.error v.msg
    }
  }
}
