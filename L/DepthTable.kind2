L.DepthTable: Type
L.DepthTable = List Entry

L.DepthTable.new: L.DepthTable
L.DepthTable.new = []

L.DepthTable.get (table: L.DepthTable) (name: String): Maybe U60
L.DepthTable.get table key = (Maybe.map  (x => (Pair.snd x)) (List.head (List.filter table e => (Entry.compare key e))))

L.DepthTable.set (table: L.DepthTable) (name: String): L.DepthTable
L.DepthTable.set table name = 
  let depth = (+ (Nat.to_u60 (List.length table)) 1)
  let entry = (List.head (List.filter table e => (Entry.compare name e)))
  match Maybe entry {
    none =>
      // Insert
      (List.cons (Pair.new name depth) table)
    some =>
      // Replace value
      List.map table (entry => (Bool.if (Entry.compare name entry)
        (Pair.new name depth)
        entry
      ))
  }


// Implementation
Entry: Type
Entry = Pair String U60 
Entry.compare (key: String) (e: Entry) {
  (String.equal (Pair.fst e) key)
}


